
.flex_container {
/*PR2019-02-05 from https://css-tricks.com/snippets/css/a-guide-to-flexbox/*/

/* Properties for the Parent (flex container):

/* container display: flex  or inline-flex;  It enables a flex context for all its direct children. */
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;

/* flex-direction: establishes the main-axis: row = hotizontal, left to right */
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
        -ms-flex-direction: row-reverse;
            flex-direction: row;  /* option: row | row-reverse | column | column-reverse; */

/* flex-wrap: By default, flex items will all try to fit onto one line.
    nowrap (default): all flex items will be on one line
    wrap: flex items will wrap onto multiple lines, from top to bottom.
    wrap-reverse: flex items will wrap onto multiple lines from bottom to top. */
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;  /* flex-wrap: nowrap | wrap | wrap-reverse;  */

/* flex-flow (Applies to: parent flex container element):
    This is a shorthand for the flex-direction and flex-wrap properties,
    which together define the flex container's main and cross axes.
    The default value is row nowrap. */

/* justify-content
    This defines the alignment along the main axis.
    It helps distribute extra free space left over when either all the flex items on a line are inflexible,
    or are flexible but have reached their maximum size.
    It also exerts some control over the alignment of items when they overflow the line.
        flex-start (default): items are packed toward the start line
        flex-end: items are packed toward the end line
        center: items are centered along the line
        space-between: items are evenly distributed in the line; first item is on the start line, last item on the end line
        space-around: items are evenly distributed in the line with equal space around them.
        space-evenly: items are distributed so that the spacing between any two items (and the space to the edges) is equal. */

    -ms-flex-pack: distribute;
        justify-content: space-around; /*center space-between; space-around PR2019-01-05 */
    /*  flex-flow: is a shorthand flex-direction and flex-wrap <‘flex-direction’> || <‘flex-wrap’>  */

/* align-items
    This defines the default behavior for how flex items are laid out along the cross axis on the current line.
    Think of it as the justify-content version for the cross-axis (perpendicular to the main-axis).
        stretch (default): stretch to fill the container (still respect min-width/max-width)
        flex-start: cross-start margin edge of the items is placed on the cross-start line
        flex-end: cross-end margin edge of the items is placed on the cross-end line
        center: items are centered in the cross-axis
        baseline: items are aligned such as their baselines align */

     -webkit-box-align: stretch;
         -ms-flex-align: stretch;
             align-items: stretch;   /*   align-items: stretch | flex-start | flex-end | center |  */

/* align-content
    This aligns a flex container's lines within when there is extra space in the cross-axis,
    similar to how justify-content aligns individual items within the main-axis.
    Note: this property has no effect when there is only one line of flex items
        flex-start: lines packed to the start of the container
        flex-end: lines packed to the end of the container
        center: lines packed to the center of the container
        space-between: lines evenly distributed; the first line is at the start of the container while the last one is at the end
        space-around: lines evenly distributed with equal space around each line
        stretch (default): lines stretch to take up the remaining space */

    -ms-flex-line-pack: start;
        align-content: flex-start;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

    /*margin: 0px; /*these dont work: margin: none; margin: 0;*/

    padding: 10px;
    margin-left: 220px; /* Same as the width of the sidebar */

}


/* Properties for the Children (flex items): */

/* order
    By default, flex items are laid out in the source order.
    However, the order property controls the order in which they appear in the flex container.

/* flex-grow
    This defines the ability for a flex item to grow if necessary.
    It accepts a unitless value that serves as a proportion.
    It dictates what amount of the available space inside the flex container the item should take up.

    If all items have flex-grow set to 1, the remaining space in the container will be distributed equally to all children.
    If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least). */

/* flex-shrink
    This defines the ability for a flex item to shrink if necessary. Negative numbers are invalid. */

/*  flex-basis
    This defines the default size of an element before the remaining space is distributed.
    It can be a length (e.g. 20%, 5rem, etc.) or a keyword.
    The auto keyword means "look at my width or height property"
    (which was temporarily done by the main-size keyword until deprecated).
    The content keyword means "size it based on the item's content" - this keyword isn't well supported yet,
    so it's hard to test and harder to know what its brethren max-content, min-content, and fit-content do.

    If set to 0, the extra space around content isn't factored in.
    If set to auto, the extra space is distributed based on its flex-grow value. See this graphic. */

/*  flex
    This is the shorthand for flex-grow, flex-shrink and flex-basis combined.
    The second and third parameters (flex-shrink and flex-basis) are optional. Default is 0 1 auto.
    It is recommended that you use this shorthand property rather than set the individual properties.
    The short hand sets the other values intelligently. */

/* align-self:
    This allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
    Please see the align-items explanation to understand the available values. */

.flex_content {

/*
    -webkit-box-flex: 1;
        -ms-flex: auto;
            flex: auto; /*  <length> | auto; /* default auto */

    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;

    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
        flex-direction: row;

    -ms-flex-wrap: wrap;
        flex-wrap: wrap;  /* flex-wrap: nowrap | wrap | wrap-reverse;  */

    -ms-flex-pack: distribute;
        justify-content: space-around; /*center space-between; space-around PR2019-01-05 */
    /*  flex-flow: is a shorthand flex-direction and flex-wrap <‘flex-direction’> || <‘flex-wrap’>  */

    /*  align-items defines how flex items are laid out along the cross axis on the current line. */
    -webkit-box-align: stretch;
        -ms-flex-align: stretch;
            align-items: stretch;   /*   align-items: stretch | flex-start | flex-end | center |  */

    /*  align-content aligns a flex container's lines within when there is extra space in the cross-axis,   */
    -ms-flex-line-pack: start;
        align-content: flex-start;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

  text-align: left;


/* The flex CSS property is a shorthand property specifying the ability
    of a flex item to alter its dimensions to fill available space. It contains:
        flex-grow: 0;     /* do not grow   - initial value: 0
        flex-shrink: 0;   /* do not shrink - initial value: 1
        flex-basis: 25em; /* width/height  - initial value: auto */

    padding: 0px;
    /*border: 2px solid purple;    /*  #2D4E77; HeaderBackColor Default Schema Blauw donkerblauw */
    margin: 0px;

    background-color:  #e0e0e0;
    border-color: #c4c4c4;
}


.flex_searchbar {
    padding-right: 10px;
    padding-top: 10px;
    padding-bottom: 10px;
    padding-left: 0;
}

.content_wrapper {
    -webkit-box-flex: 0;
        -ms-flex: 0 0 220px;
            flex: 0 1 220px; /* [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */
    -webkit-box-flex: 1;-ms-flex: 1 1 220px;flex: 1 1 220px;

    margin: 32px 10px 10px 10px;
    /* padding: <top><right><bottom><left> */

   /* background: #fdf7e1; /* more lighter shade of tsa yellow */
   /* border: 1px solid #808080;    /* #808080 medium grey; #141619  dark grey; */
   border: 0;
}

.content_header {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;

    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-flow: row wrap; /* flex-direction: row | row-reverse | column | column-reverse; */
        flex-flow: row wrap; /* flex-wrap: nowrap | wrap | wrap-reverse;  */
    /*  flex-flow: is a shorthand flex-direction and flex-wrap <‘flex-direction’> || <‘flex-wrap’>  */

    -webkit-box-pack: between;
    -ms-flex-pack: between;
        justify-content: between; /*center space-between; space-around PR2019-01-05 */

    /*  align-items defines how flex items are laid out along the cross axis on the current line. */
     -webkit-box-align: stretch;
         -ms-flex-align: stretch;
             align-items: stretch;   /*   align-items: stretch | flex-start | flex-end | center |  */

    /*  align-content aligns a flex container's lines within when there is extra space in the cross-axis,   */
    -ms-flex-line-pack: start;
        align-content: flex-start;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

    position:relative;

    line-height: 1.15rem;

    /* padding: 1rem 0.5rem 0.25rem 0.5rem;*/
    /*padding: 0.5rem 0.5rem 0.25rem 0.5rem;*/
    padding: 0px;
    margin: 0px;
}

.content_header_left {
    flex: 1;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    text-align: left;
    align-content: flex-end;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

    position:absolute; /* this outlines text to the bottom, you must set parent position:relative; */
    bottom:0;
}

.content_header_right {
    flex: 1;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;

    text-align: right;
}

.content_header_middle {
    flex: 1;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    margin: auto;
    text-align: center;
}

.content_subheader_left {
    flex: 1;
    text-align: left;
    align-items: end;
}

.content_subheader_left_flex2 {
    flex: 2;
    text-align: left;
    align-items: end;
}

.content_subheader_right {
    flex: 1;
    text-align: right;
}
.content_subheader_right_flex2 {
    flex: 2;
    text-align: right;
}

.btn-add {
    padding: 0rem 0.5rem 0rem 0.5rem;
    margin: 0px;

    color: #303024; /* PR logo zwart */
    background-color:  #e0e0e0;
    border-color: #c4c4c4;

}
.btn-weekday {
    padding: 0rem 0.05rem 0rem 0.05rem;
    margin: 0px;
    width: 42px;
    color: #303024; /* PR logo zwart */
    background-color: white;
    border-color: #c4c4c4;
    overflow-wrap: break-word;

}
.btn-smallfont {
    font-size: 12px;
    padding: 1px;
    /*color: #303024; /* PR logo zwart */
     /*background:   #d8d8d8;  /* light grey 218 218 218 100%  */
        /*background: #f8f8f8; /*licht licht licht grijs 248 248 248 */
    /*background: #e8e8e880; /*licht licht grijs 232 232 232 50% */
    background-color: transparent; /* #f5f5f5 = 245 245 245  licht licht licht grijs; */
    /*background-color: white;*/
    border-color: #c4c4c4;
    border-radius: 0.2rem;
    overflow-wrap: break-word;

}
.databar {
    -webkit-box-flex: 1;
    -ms-flex: 1;
        flex: 1; /* [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */

    padding: 10px;
    margin: 0px;


/*
    -ms-flex-item-align:stretch;
        -ms-grid-row-align:stretch;
        align-self:stretch;
*/
}

.flex_picker {
    /*flex: 0 0 240px; /* [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */
    /*-webkit-box-flex: 1;
        -ms-flex: auto;
            flex: auto;*/

    /*-webkit-box-flex: 0;
        -ms-flex: 0 0 240px;
            flex: 0 0 240px; /* [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ] */
/*
      -webkit-box-flex: initial;
      -ms-flex: initial;
      flex: initial;
      width: 240px;
      */
      -webkit-box-flex: 1;
      -ms-flex: 1;
      flex: 1


/* The flex CSS property is a shorthand property specifying the ability
    of a flex item to alter its dimensions to fill available space. It contains:
        flex-grow: 0;     /* do not grow   - initial value: 0
        flex-shrink: 0;   /* do not shrink - initial value: 1
        flex-basis: 25em; /* width/height  - initial value: auto */
    margin: 0;
   /*  border: 2px solid red;    /*  #2D4E77; HeaderBackColor Default Schema Blauw donkerblauw */

    padding: 10px;

}

table {
    display: table;
    padding: 4px 8px;
    /*margin: 4px 8px;*/

    width: 100%;

    font-size: 14px;
    font-family: "Lucida Sans", sans-serif;

    /*background-color: #800000; /*dark red*/
    /*background-color: #a21313; /*reddish*/
    /*background-color:  #2D4E77; /* HeaderBackColor Default Schema Blauw donkerblauw */
    /*background-color: #d7e4f3;/* is even lighter blueish */


    /*background: #e0e0e0; /* default light grey */

    /*color: #376191;  /* Default Schema Blauw donkerblauw */
    /*color: #141619;  /*dark grey; */
    color: #000000;  /* black; */
    /* to prevent text selection */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.color_darkblue {
    background:  #2D4E77; /* HeaderBackColor Default Schema Blauw donkerblauw */
    color: #edf2f8;
}

.color_darkgrey {
    background:  #808080;
    color: #e4e4e4;
}
.data_table {
    display: table;
    padding: 4px 8px;
    /*margin: 4px 8px;*/
    border: 1px solid ;    /*  #2D4E77; HeaderBackColor Default Schema Blauw donkerblauw */

    width: 100%;


    /*background-color: #4A7DBB; /* 'TextboxBackColor Default Schema Blauw medium blauw */
    /*background-color: #d7e4f3; /*#d7e4f3 is even lighter blueish   */
    /*background-color: #B8CCE4; /* 'TextboxBackColor Default Schema Blauw lichtblauw */
    /*background: #F5FAFF; */ /*licht licht blauw; */

   /* background: #d7e4f3;/* is even lighter blueish */
    background:  #bacee6;

    /*color: #376191;  /* Default Schema Blauw donkerblauw */
color: #000;
    /* to prevent text selection */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

.tr {
    /* to prevent text selection */
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;

    -webkit-transition: background-color 0.25s ease-in-out;
    -o-transition: background-color 0.25s ease-in-out;
    transition: background-color 0.25s ease-in-out;
}


.icon_show {
    display: ""

}
.inactive_hide {
    display: "none"

}

.flexcontainer_horizontal {
    /* PR2020-04-20 */
    display: flex;

    flex-direction: row; /* flex-direction: row | row-reverse | column | column-reverse; */
    flex-wrap: wrap; /* flex-wrap: nowrap | wrap | wrap-reverse;  */
    /*  flex-flow: is a shorthand flex-direction and flex-wrap <‘flex-direction’> || <‘flex-wrap’>  */
    justify-content: between; /*center space-between; space-around PR2019-01-05 */
    /*  align-items defines how flex items are laid out along the cross axis on the current line. */
        align-items: stretch;   /*   align-items: stretch | flex-start | flex-end | center |  */
    /*  align-content aligns a flex container's lines within when there is extra space in the cross-axis,   */
    align-content: flex-start;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

    position:relative;

    line-height: 1.15rem;
    padding: 0px;
    margin: 0px;
}
.flexcontainer_vertical {
    display: flex;

    flex-direction: column; /* flex-direction: row | row-reverse | column | column-reverse; */
    flex-wrap: wrap; /* flex-wrap: nowrap | wrap | wrap-reverse;  */
    /*  flex-flow: is a shorthand flex-direction and flex-wrap <‘flex-direction’> || <‘flex-wrap’>  */
    justify-content: between; /*center space-between; space-around PR2019-01-05 */
    /*  align-items defines how flex items are laid out along the cross axis on the current line. */
        align-items: stretch;   /*   align-items: stretch | flex-start | flex-end | center |  */
    /*  align-content aligns a flex container's lines within when there is extra space in the cross-axis,   */
    align-content: flex-start;  /* flex-start | flex-end | center | space-between | space-around | stretch; */

    /*position:relative;*/

    line-height: 1.15rem;
    padding: 0px;
    margin: 0px;
}

.flexitem_1 {
    flex: 1;
    width: 100%;
}

/* xxxxxxxxxxxxxxxxxxx   Modal xxxxxxxxxxxxxxxxxxxxxxxxxxx*/

.modal-body {
    padding-top: 0px;
    padding-bottom: 4px;
}

.modal_container {
        /*PR2019-02-05 from https://css-tricks.com/snippets/css/a-guide-to-flexbox/*/
        /* PR2019-06-23 from https://yoksel.github.io/flex-cheatsheet/ */
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}

.modal_body_left {
    flex: 1;
    text-align: left;
    align-items: end;
}

.modal_body_right {
    flex: 2;
    text-align: left;
    /*background: #f8f8f8;*/
}
.modal_flexcontainer {
        /*PR2019-02-05 from https://css-tricks.com/snippets/css/a-guide-to-flexbox/*/
        /* PR2019-06-23 from https://yoksel.github.io/flex-cheatsheet/ */
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
}
.modal_flex1 {
    flex: 1;
}
.modal_flex2 {
    flex: 2;
}
.modal_flex3 {
    flex: 3;
}
.modal_flex4 {
    flex: 4;
}

/* Bootstrap Modal Issue - Scrolling Gets Disabled */
/* from https://stackoverflow.com/questions/28077066/bootstrap-modal-issue-scrolling-gets-disabled */

.modal {
  overflow-y:auto;
}

.tsa_note {
  resize: none;
}

.tsa_textarea_resize {
  resize: vertical;

}.tsa_textarea_div {
   margin: 4px 16px 0px 16px;  /* top, right, bottom, left:
}